(function() {var implementors = {};
implementors["bitfrob"] = [{"text":"impl&lt;const L:&nbsp;u32, const H:&nbsp;u32&gt; Freeze for <a class=\"struct\" href=\"bitfrob/struct.U32ConstRegionMask.html\" title=\"struct bitfrob::U32ConstRegionMask\">U32ConstRegionMask</a>&lt;L, H&gt;","synthetic":true,"types":["bitfrob::const_region_mask::U32ConstRegionMask"]},{"text":"impl&lt;const L:&nbsp;u32, const H:&nbsp;u32&gt; Freeze for <a class=\"struct\" href=\"bitfrob/struct.U16ConstRegionMask.html\" title=\"struct bitfrob::U16ConstRegionMask\">U16ConstRegionMask</a>&lt;L, H&gt;","synthetic":true,"types":["bitfrob::const_region_mask::U16ConstRegionMask"]},{"text":"impl&lt;const L:&nbsp;u32, const H:&nbsp;u32&gt; Freeze for <a class=\"struct\" href=\"bitfrob/struct.U8ConstRegionMask.html\" title=\"struct bitfrob::U8ConstRegionMask\">U8ConstRegionMask</a>&lt;L, H&gt;","synthetic":true,"types":["bitfrob::const_region_mask::U8ConstRegionMask"]},{"text":"impl Freeze for <a class=\"struct\" href=\"bitfrob/struct.u8x2.html\" title=\"struct bitfrob::u8x2\">u8x2</a>","synthetic":true,"types":["bitfrob::u8x2_::u8x2"]}];
implementors["gba2k"] = [{"text":"impl Freeze for <a class=\"struct\" href=\"gba2k/bios/struct.BitUnpackInfo.html\" title=\"struct gba2k::bios::BitUnpackInfo\">BitUnpackInfo</a>","synthetic":true,"types":["gba2k::bios::x10::BitUnpackInfo"]},{"text":"impl Freeze for <a class=\"struct\" href=\"gba2k/bios/struct.BitUnpackOffset.html\" title=\"struct gba2k::bios::BitUnpackOffset\">BitUnpackOffset</a>","synthetic":true,"types":["gba2k::bios::x10::BitUnpackOffset"]},{"text":"impl&lt;T&gt; !Freeze for <a class=\"struct\" href=\"gba2k/interrupts/struct.GbaCell.html\" title=\"struct gba2k::interrupts::GbaCell\">GbaCell</a>&lt;T&gt;","synthetic":true,"types":["gba2k::interrupts::gba_cell::GbaCell"]},{"text":"impl Freeze for <a class=\"struct\" href=\"gba2k/interrupts/struct.IrqBits.html\" title=\"struct gba2k::interrupts::IrqBits\">IrqBits</a>","synthetic":true,"types":["gba2k::interrupts::IrqBits"]},{"text":"impl Freeze for <a class=\"struct\" href=\"gba2k/keys/struct.KeyInput.html\" title=\"struct gba2k::keys::KeyInput\">KeyInput</a>","synthetic":true,"types":["gba2k::keys::key_input::KeyInput"]},{"text":"impl Freeze for <a class=\"struct\" href=\"gba2k/keys/struct.KeyChanges.html\" title=\"struct gba2k::keys::KeyChanges\">KeyChanges</a>","synthetic":true,"types":["gba2k::keys::key_input::KeyChanges"]},{"text":"impl Freeze for <a class=\"struct\" href=\"gba2k/keys/struct.KeyControl.html\" title=\"struct gba2k::keys::KeyControl\">KeyControl</a>","synthetic":true,"types":["gba2k::keys::key_control::KeyControl"]},{"text":"impl Freeze for <a class=\"struct\" href=\"gba2k/video/mode3/struct.Mode3.html\" title=\"struct gba2k::video::mode3::Mode3\">Mode3</a>","synthetic":true,"types":["gba2k::video::mode3::Mode3"]},{"text":"impl Freeze for <a class=\"struct\" href=\"gba2k/video/mode3/struct.Mode3Scanlines.html\" title=\"struct gba2k::video::mode3::Mode3Scanlines\">Mode3Scanlines</a>","synthetic":true,"types":["gba2k::video::mode3::Mode3Scanlines"]},{"text":"impl Freeze for <a class=\"struct\" href=\"gba2k/video/struct.Color.html\" title=\"struct gba2k::video::Color\">Color</a>","synthetic":true,"types":["gba2k::video::color::Color"]},{"text":"impl Freeze for <a class=\"struct\" href=\"gba2k/video/struct.DisplayControl.html\" title=\"struct gba2k::video::DisplayControl\">DisplayControl</a>","synthetic":true,"types":["gba2k::video::display_control::DisplayControl"]},{"text":"impl Freeze for <a class=\"enum\" href=\"gba2k/video/enum.VideoMode.html\" title=\"enum gba2k::video::VideoMode\">VideoMode</a>","synthetic":true,"types":["gba2k::video::display_control::VideoMode"]},{"text":"impl Freeze for <a class=\"struct\" href=\"gba2k/video/struct.DisplayStatus.html\" title=\"struct gba2k::video::DisplayStatus\">DisplayStatus</a>","synthetic":true,"types":["gba2k::video::display_status::DisplayStatus"]}];
implementors["voladdress"] = [{"text":"impl&lt;T, R, W&gt; Freeze for <a class=\"struct\" href=\"voladdress/struct.VolAddress.html\" title=\"struct voladdress::VolAddress\">VolAddress</a>&lt;T, R, W&gt;","synthetic":true,"types":["voladdress::voladdress_::VolAddress"]},{"text":"impl&lt;T, R, W, const C:&nbsp;usize&gt; Freeze for <a class=\"struct\" href=\"voladdress/struct.VolBlock.html\" title=\"struct voladdress::VolBlock\">VolBlock</a>&lt;T, R, W, C&gt;","synthetic":true,"types":["voladdress::volblock::VolBlock"]},{"text":"impl&lt;T, R, W&gt; Freeze for <a class=\"struct\" href=\"voladdress/struct.VolBlockIter.html\" title=\"struct voladdress::VolBlockIter\">VolBlockIter</a>&lt;T, R, W&gt;","synthetic":true,"types":["voladdress::volblock::VolBlockIter"]},{"text":"impl&lt;T, R, W, const C:&nbsp;usize, const S:&nbsp;usize&gt; Freeze for <a class=\"struct\" href=\"voladdress/struct.VolSeries.html\" title=\"struct voladdress::VolSeries\">VolSeries</a>&lt;T, R, W, C, S&gt;","synthetic":true,"types":["voladdress::volseries::VolSeries"]},{"text":"impl&lt;T, R, W, const S:&nbsp;usize&gt; Freeze for <a class=\"struct\" href=\"voladdress/struct.VolSeriesIter.html\" title=\"struct voladdress::VolSeriesIter\">VolSeriesIter</a>&lt;T, R, W, S&gt;","synthetic":true,"types":["voladdress::volseries::VolSeriesIter"]},{"text":"impl Freeze for <a class=\"struct\" href=\"voladdress/struct.Safe.html\" title=\"struct voladdress::Safe\">Safe</a>","synthetic":true,"types":["voladdress::Safe"]},{"text":"impl Freeze for <a class=\"struct\" href=\"voladdress/struct.Unsafe.html\" title=\"struct voladdress::Unsafe\">Unsafe</a>","synthetic":true,"types":["voladdress::Unsafe"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()