var searchIndex = JSON.parse('{\
"gba2k":{"doc":"A GBA development project.","t":[0,0,0,14,14,14,0,0,5,3,3,5,5,5,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,11,11,11,11,11,11,11,11,18,18,18,18,18,3,8,18,17,17,17,3,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,17,17,18,18,3,6,17,17,3,3,18,17,6,18,17,4,18,13,13,13,13,13,13,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,3,6,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["bios","interrupts","keys","read_lr","read_pc","read_sp","rt0","video","BitUnPack","BitUnpackInfo","BitUnpackOffset","Halt","IntrWait","VBlankIntrWait","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","default","default","delta","dest_elem_bits","eq","eq","fmt","fmt","from","from","hash","hash","into","into","ne","ne","new","offset","offset_zeroes","partial_cmp","partial_cmp","src_elem_bits","src_len_bytes","try_from","try_from","try_into","try_into","type_id","type_id","with_delta","with_offset_zeroes","DMA0","DMA1","DMA2","DMA3","GAMEPAK","GbaCell","GbaCellSafe","H_BLANK","IE","IF","IME","IrqBits","KEYPAD","SERIAL","TIMER0","TIMER1","TIMER2","TIMER3","V_BLANK","V_COUNTER","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","cmp","default","default","dma0","dma1","dma2","dma3","eq","fmt","fmt","from","from","from","gamepak","get","hash","hblank","into","into","keypad","ne","new","new","not","partial_cmp","read","serial","timer0","timer1","timer2","timer3","try_from","try_from","try_into","try_into","type_id","type_id","vblank","vcounter","with_dma0","with_dma1","with_dma2","with_dma3","with_gamepak","with_hblank","with_keypad","with_serial","with_timer0","with_timer1","with_timer2","with_timer3","with_vblank","with_vcounter","write","KEYCNT","KEYINPUT","KeyChanges","KeyControl","KeyInput","a","a","a","all_required","b","b","b","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","changes_since","clone","clone","clone","cmp","cmp","cmp","default","default","default","down","down","down","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","hash","hash","hash","into","into","into","irq_enable","l","l","l","left","left","left","ne","ne","ne","new","new","new","partial_cmp","partial_cmp","partial_cmp","r","r","r","right","right","right","select","select","select","start","start","start","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","up","up","up","with_a","with_a","with_a","with_all_required","with_b","with_b","with_b","with_down","with_down","with_down","with_irq_enable","with_l","with_l","with_l","with_left","with_left","with_left","with_r","with_r","with_r","with_right","with_right","with_right","with_select","with_select","with_select","with_start","with_start","with_start","with_up","with_up","with_up","__aeabi_memcpy","__aeabi_memcpy4","__aeabi_memcpy8","__aeabi_memmove","__aeabi_memmove4","__aeabi_memmove8","memcpy","memcpy_sram","memmove","set_rust_irq_handler","text_single_swp","text_single_swpb","BACKDROP_COLOR","BG_PALETTE","BLACK","BLUE","Color","ColorAddress","DISPCNT","DISPSTAT","DisplayControl","DisplayStatus","GREEN","OBJ_PALETTE","PalBank","RED","VCOUNT","VideoMode","WHITE","_0","_1","_2","_3","_4","_5","bg_palbank","blue","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","cmp","cmp","cmp","cmp","default","default","default","default","display_bg0","display_bg1","display_bg2","display_bg3","display_obj","display_obj_win","display_win0","display_win1","eq","eq","eq","eq","fmt","fmt","fmt","fmt","forced_blank","frame_select","from","from","from","from","from","green","hash","hash","hash","hash","hblank_irq","hblank_oam_free","into","into","into","into","is_hblank","is_vblank","is_vcounter","mode3","ne","ne","ne","new","new","new","obj_palbank","obj_vram_1d","partial_cmp","partial_cmp","partial_cmp","partial_cmp","red","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vblank_irq","vcounter","vcounter_irq","video_mode","with_blue","with_display_bg0","with_display_bg1","with_display_bg2","with_display_bg3","with_display_obj","with_display_obj_win","with_display_win0","with_display_win1","with_forced_blank","with_frame_select","with_green","with_hblank_irq","with_hblank_oam_free","with_is_hblank","with_is_vblank","with_is_vcounter","with_obj_vram_1d","with_red","with_vblank_irq","with_vcounter","with_vcounter_irq","with_video_mode","HEIGHT","Mode3","Mode3Scanline","Mode3Scanlines","WIDTH","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","count","default","default","eq","eq","fmt","fmt","from","from","hash","hash","into","into","into_iter","last","max","min","ne","new","next","nth","partial_cmp","partial_cmp","pixel_xy","scanlines","size_hint","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["gba2k","","","","","","","","gba2k::bios","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gba2k::interrupts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gba2k::keys","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gba2k::rt0","","","","","","","","","","","","gba2k::video","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gba2k::video::mode3","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The BIOS of the GBA provides some code that’s built-in …","Module for interacting with the GBA’s hardware interrupt …","Allows reading the GBA’s key inputs.","Inline assembly to read the link register value.","Inline assembly to read the program counter value.","Inline assembly to read the stack pointer value.","The <code>rt0</code> is the assembly runtime that runs <em>before</em> your Rust …","Module for utilizing the GBA’s screen.","<code>swi #0x10</code>: Decompresses bit-packed elements.","Stores info for unpacking data with <code>BitUnPack</code>.","Stores info for unpacking data with <code>BitUnPack</code>.","<code>swi #0x02</code>: Halts the CPU until an interrupt request occurs.","<code>swi #0x04</code>: Performs an “interrupt wait”.","<code>swi #0x05</code>: Performs an “interrupt wait” for a new …","","","","","","","","","","","","Width of destination elements in bits.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","How much to add to non-zero elements by, and if zero …","","","","Width of source elements in bits.","Length of the source memory, in bytes.","","","","","","","","","","","","","","A GbaCell holds a value that’s accessed in a single …","Marker trait for all types that will safely work with a …","","“Interrupts Enabled”","“Interrupts Flagged”","“Interrupt Master Enable”","A bit set where each bit is a particular interrupt source.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Gets the raw pointer to the value.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Makes a new cell.","","","","Reads the current value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Writes a new value.","Key interrupt control.","Reads the hardware key state.","A change in the key state data.","Configures when the keypad should send an interrupt.","Key state data.","","","","","","","","","","","","","","Determines what keys have changed since a previous …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Provides ARM-style memory copy.","Works like __aeabi_memcpy but optimized for pointers …","Works like __aeabi_memcpy but optimized for pointers …","Like __aeabi_memcpy, but the regions can overlap.","Like __aeabi_memcpy4, but the regions can overlap.","Like __aeabi_memcpy8, but the regions can overlap.","Provides libc-style memory copy.","A memory copy operation guaranteed to work correctly with …","Like memcpy, but the regions can overlap.","Sets the rust function to run when a hardware interrupt …","A <code>swp</code> instruction, stored in the <code>.text</code> section.","A <code>swpb</code> instruction, stored in the <code>.text</code> section.","The color of the screen’s “backdrop”.","The background palette entries.","","","The GBA has RGB color with 5 bits per channel (“RGB555”…","A volatile address for a Color value.","“Display Control”","“Display Status”","The display control setting is the top level control of …","The display status lets you get info about the display and …","","The object palette entries.","Alias for an individual palbank (16 color group) within …","","Returns the current scanline that the PPU is drawing (0 …","","","","","","","","","Gets palbank <code>x</code> of the background palette.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Video Mode 3: A single 240x160 bitmap.","","","","","","","Gets palbank <code>x</code> of the object palette.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The screen height, 160 pixels.","","A scanline of the Video Mode 3 bitmap.","","The screen width, 240 pixels.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,6,3,6,3,6,3,6,3,6,6,3,3,6,3,6,3,6,3,6,3,6,3,6,6,3,6,3,6,3,3,3,6,3,6,3,6,6,6,5,5,5,5,5,0,0,5,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,15,5,15,5,5,5,15,5,5,5,5,5,5,15,5,15,5,5,5,15,5,5,15,5,5,5,15,5,5,5,15,5,5,5,5,5,15,5,15,5,15,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,15,0,0,0,0,0,17,18,19,19,17,18,19,17,18,19,17,18,19,17,17,18,19,17,18,19,17,18,19,17,18,19,17,18,19,17,18,19,17,17,18,19,17,18,19,17,18,19,19,17,18,19,17,18,19,17,18,19,17,18,19,17,18,19,17,18,19,17,18,19,17,18,19,17,18,19,17,18,19,17,18,19,17,18,19,17,18,19,17,18,19,19,17,18,19,17,18,19,19,17,18,19,17,18,19,17,18,19,17,18,19,17,18,19,17,18,19,17,18,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,0,0,0,0,0,0,22,0,0,22,0,0,22,24,24,24,24,24,24,0,22,22,23,24,25,22,23,24,25,22,23,24,25,22,23,24,25,22,23,24,25,23,23,23,23,23,23,23,23,22,23,24,25,22,23,24,25,23,23,22,22,23,24,25,22,22,23,24,25,25,23,22,23,24,25,25,25,25,0,22,23,25,22,23,25,0,23,22,23,24,25,22,22,23,24,25,22,23,24,25,22,23,24,25,25,25,25,23,22,23,23,23,23,23,23,23,23,23,23,22,25,23,25,25,25,23,22,25,25,25,23,26,0,0,0,26,26,27,26,27,26,27,26,27,27,26,27,26,27,26,27,26,27,26,27,26,27,27,27,27,27,27,27,27,27,26,27,26,26,27,26,27,26,27,26,27],"f":[0,0,0,0,0,0,0,0,[[1,2,3]],0,0,[[]],[[4,5]],[[]],[[]],[[]],[[]],[[]],[3,3],[6,6],[[3,3],7],[[6,6],7],[[],3],[[],6],[6,2],0,[[3,3],4],[[6,6],4],[[3,8],9],[[6,8],9],[[]],[[]],[3],[6],[[]],[[]],[[3,3],4],[[6,6],4],[[],6],0,[6,4],[[3,3],[[10,[7]]]],[[6,6],[[10,[7]]]],0,0,[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[6,2],6],[[6,4],6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[5,5],5],[[5,5]],[[5,5],5],[[5,5]],[[5,5],5],[[5,5]],[[]],[[]],[[]],[[]],[5,5],[[5,5],7],[[],[[15,[[0,[13,14]]]]]],[[],5],[5,4],[5,4],[5,4],[5,4],[[5,5],4],[[15,8],9],[[5,8],9],[[]],[16,5],[[]],[5,4],[[[15,[14]]]],[5],[5,4],[[]],[[]],[5,4],[[5,5],4],[14,[[15,[14]]]],[[],5],[5,5],[[5,5],[[10,[7]]]],[[[15,[14]]],14],[5,4],[5,4],[5,4],[5,4],[5,4],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[5,4],[5,4],[[5,4],5],[[5,4],5],[[5,4],5],[[5,4],5],[[5,4],5],[[5,4],5],[[5,4],5],[[5,4],5],[[5,4],5],[[5,4],5],[[5,4],5],[[5,4],5],[[5,4],5],[[5,4],5],[[[15,[14]],14]],0,0,0,0,0,[17,4],[18,4],[19,4],[19,4],[17,4],[18,4],[19,4],[[]],[[]],[[]],[[]],[[]],[[]],[[17,17],18],[17,17],[18,18],[19,19],[[17,17],7],[[18,18],7],[[19,19],7],[[],17],[[],18],[[],19],[17,4],[18,4],[19,4],[[17,17],4],[[18,18],4],[[19,19],4],[[17,8],9],[[18,8],9],[[19,8],9],[16,17],[[]],[[]],[[]],[17],[18],[19],[[]],[[]],[[]],[19,4],[17,4],[18,4],[19,4],[17,4],[18,4],[19,4],[[17,17],4],[[18,18],4],[[19,19],4],[[],17],[[],18],[[],19],[[17,17],[[10,[7]]]],[[18,18],[[10,[7]]]],[[19,19],[[10,[7]]]],[17,4],[18,4],[19,4],[17,4],[18,4],[19,4],[17,4],[18,4],[19,4],[17,4],[18,4],[19,4],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[17,4],[18,4],[19,4],[[17,4],17],[[18,4],18],[[19,4],19],[[19,4],19],[[17,4],17],[[18,4],18],[[19,4],19],[[17,4],17],[[18,4],18],[[19,4],19],[[19,4],19],[[17,4],17],[[18,4],18],[[19,4],19],[[17,4],17],[[18,4],18],[[19,4],19],[[17,4],17],[[18,4],18],[[19,4],19],[[17,4],17],[[18,4],18],[[19,4],19],[[17,4],17],[[18,4],18],[[19,4],19],[[17,4],17],[[18,4],18],[[19,4],19],[[17,4],17],[[18,4],18],[[19,4],19],0,0,0,0,0,0,0,0,0,[10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[20,21],[22,16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[22,22],[23,23],[24,24],[25,25],[[22,22],7],[[23,23],7],[[24,24],7],[[25,25],7],[[],22],[[],23],[[],24],[[],25],[23,4],[23,4],[23,4],[23,4],[23,4],[23,4],[23,4],[23,4],[[22,22],4],[[23,23],4],[[24,24],4],[[25,25],4],[[22,8],9],[[23,8],9],[[24,8],9],[[25,8],9],[23,4],[23,4],[16,22],[[]],[[]],[[]],[[]],[22,16],[22],[23],[24],[25],[25,4],[23,4],[[]],[[]],[[]],[[]],[25,4],[25,4],[25,4],0,[[22,22],4],[[23,23],4],[[25,25],4],[[],22],[[],23],[[],25],[20,21],[23,4],[[22,22],[[10,[7]]]],[[23,23],[[10,[7]]]],[[24,24],[[10,[7]]]],[[25,25],[[10,[7]]]],[22,16],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[25,4],[25,16],[25,4],[23,24],[[22,16],22],[[23,4],23],[[23,4],23],[[23,4],23],[[23,4],23],[[23,4],23],[[23,4],23],[[23,4],23],[[23,4],23],[[23,4],23],[[23,4],23],[[22,16],22],[[25,4],25],[[23,4],23],[[25,4],25],[[25,4],25],[[25,4],25],[[23,4],23],[[22,16],22],[[25,4],25],[[25,16],25],[[25,4],25],[[23,24],23],0,0,0,0,0,[[]],[[]],[[]],[[]],[26,26],[27,27],[[26,26],7],[[27,27],7],[27,20],[[],26],[[],27],[[26,26],4],[[27,27],4],[[26,8],9],[[27,8],9],[[]],[[]],[26],[27],[[]],[[]],[[]],[27,10],[27,10],[27,10],[[27,27],4],[[],27],[27,10],[[27,20],10],[[26,26],[[10,[7]]]],[[27,27],[[10,[7]]]],[[26,20,20],28],[26,27],[27],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12]],"p":[[15,"u8"],[15,"u32"],[3,"BitUnpackInfo"],[15,"bool"],[3,"IrqBits"],[3,"BitUnpackOffset"],[4,"Ordering"],[3,"Formatter"],[6,"Result"],[4,"Option"],[4,"Result"],[3,"TypeId"],[8,"Default"],[8,"GbaCellSafe"],[3,"GbaCell"],[15,"u16"],[3,"KeyInput"],[3,"KeyChanges"],[3,"KeyControl"],[15,"usize"],[6,"PalBank"],[3,"Color"],[3,"DisplayControl"],[4,"VideoMode"],[3,"DisplayStatus"],[3,"Mode3"],[3,"Mode3Scanlines"],[6,"ColorAddress"]]},\
"voladdress":{"doc":"A crate for working with volatile locations, particularly …","t":[3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Safe","Unsafe","VolAddress","VolBlock","VolBlockIter","VolSeries","VolSeriesIter","add","apply","apply","apply","apply","as_usize","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","change_permissions","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","count","count","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get","get","hash","hash","hash","hash","hash","index","index","into","into","into","into","into","into","into","into_iter","into_iter","iter","iter","iter_range","iter_range","last","last","len","len","ne","ne","ne","new","new","new","next","next","next_back","next_back","nth","nth","nth_back","nth_back","offset","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","read","read","size_hint","size_hint","stride","sub","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","write"],"q":["voladdress","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Lets you put “Safe” into a generic type parameter.","Lets you put “Unsafe” into a generic type parameter.","A volatile address.","A volatile memory block.","An iterator over a volatile block.","A volatile memory “series”.","An iterator over a volatile series.","Advances the pointer by the given number of positions (…","Reads the address, applies the operation, and writes back …","Reads the address, applies the operation, and writes back …","Reads the address, applies the operation, and writes back …","Reads the address, applies the operation, and writes back …","Converts the <code>VolAddress</code> back into a normal <code>usize</code> value.","","","","","","","","","","","","","","","Changes the target type from <code>T</code> to <code>Z</code>.","Changes the permissions of the address to the new read and …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the address of the <code>i</code>th position, if it’s in bounds.","Gets the address of the <code>i</code>th position, if it’s in bounds.","","","","","","Indexes to the <code>i</code>th position of the memory block.","Indexes to the <code>i</code>th position of the memory series.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Creates an iterator over the addresses of the memory block.","Creates an iterator over the addresses of the memory …","Makes an iterator over the range bounds given.","Makes an iterator over the range bounds given.","","","The length of this block (in elements).","The length of this series (in elements).","","","","Constructs the value.","Constructs the value.","Constructs the value.","","","","","","","","","Offsets the address by the given number of positions (<code>isize</code>…","","","","","","Volatile reads the current value of <code>A</code>.","Volatile reads the current value of <code>A</code>.","","","The stride of this series (in bytes).","Reverses the pointer by the given number of positions (…","","","","","","","","","","","","","","","","","","","","","","Volatile writes a new value to <code>A</code>.","Volatile writes a new value to <code>A</code>."],"i":[0,0,0,0,0,0,0,1,1,1,1,1,1,6,7,1,8,9,3,4,6,7,1,8,9,3,4,1,1,6,7,1,8,9,1,8,9,3,4,6,7,1,8,9,3,4,1,8,9,3,4,6,7,1,8,9,3,4,8,9,1,8,9,3,4,8,9,6,7,1,8,9,3,4,6,7,8,9,8,9,6,7,8,9,1,8,9,1,8,9,6,7,6,7,6,7,6,7,1,1,8,9,3,4,1,1,6,7,9,1,6,7,1,8,9,3,4,6,7,1,8,9,3,4,6,7,1,8,9,3,4,1,1],"f":[0,0,0,0,0,0,0,[[1,2],1],[[[1,[3,4]],5]],[[[1,[4,4]],5]],[[[1,[3,3]],5]],[[[1,[4,3]],5]],[1,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[1,1],[6,6],[7,7],[1,1],[8,8],[9,9],[[[1,[10,10,10]],1],11],[[[8,[10,10,10]],8],11],[[[9,[10,10,10]],9],11],[[3,3],11],[[4,4],11],[6,2],[7,2],[[[1,[12,12,12]],1],13],[[[8,[12,12,12]],8],13],[[[9,[12,12,12]],9],13],[[3,3],13],[[4,4],13],[[1,14],15],[[8,14],15],[[9,14],15],[[3,14],15],[[4,14],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[8,2],[[16,[1]]]],[[9,2],[[16,[1]]]],[[[1,[17,17,17]]]],[[[8,[17,17,17]]]],[[[9,[17,17,17]]]],[3],[4],[[8,2],1],[[9,2],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8,6],[9,7],[[8,[18,[2]]],6],[[9,[18,[2]]],7],[6,16],[7,16],[8,2],[9,2],[[[1,[12,12,12]],1],13],[[[8,[12,12,12]],8],13],[[[9,[12,12,12]],9],13],[2,1],[2,8],[2,9],[6,16],[7,16],[6,16],[7,16],[[6,2],16],[[7,2],16],[[6,2],16],[[7,2],16],[[1,19],1],[[[1,[20,20,20]],1],[[16,[11]]]],[[[8,[20,20,20]],8],[[16,[11]]]],[[[9,[20,20,20]],9],[[16,[11]]]],[[3,3],[[16,[11]]]],[[4,4],[[16,[11]]]],[[[1,[3]]]],[[[1,[4]]]],[6],[7],[9,2],[[1,2],1],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[[1,[4]]]],[[[1,[3]]]]],"p":[[3,"VolAddress"],[15,"usize"],[3,"Safe"],[3,"Unsafe"],[8,"FnOnce"],[3,"VolBlockIter"],[3,"VolSeriesIter"],[3,"VolBlock"],[3,"VolSeries"],[8,"Ord"],[4,"Ordering"],[8,"PartialEq"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[8,"Hash"],[8,"RangeBounds"],[15,"isize"],[8,"PartialOrd"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
