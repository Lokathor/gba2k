var searchIndex = JSON.parse('{\
"gba2k":{"doc":"","t":[0,0,0,14,14,14,5,5,0,5,3,3,5,5,5,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,11,11,11,11,11,11,11,11,18,18,18,18,18,3,8,18,17,17,17,3,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,3,17,17,3,4,3,17,6,17,18,13,13,13,13,13,13,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["bios","interrupts","keyinput","read_lr","read_pc","read_sp","rt0_rom_swp","rt0_rom_swpb","video","BitUnPack","BitUnpackInfo","BitUnpackOffset","Halt","IntrWait","VBlankIntrWait","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","default","default","delta","dest_elem_bits","eq","eq","fmt","fmt","from","from","hash","hash","into","into","ne","ne","new","offset","offset_zeroes","partial_cmp","partial_cmp","src_elem_bits","src_len_bytes","try_from","try_from","try_into","try_into","type_id","type_id","with_delta","with_offset_zeroes","DMA0","DMA1","DMA2","DMA3","GAMEPAK","GbaCell","GbaCellSafe","H_BLANK","IE","IF","IME","IrqBits","KEYPAD","SERIAL","TIMER0","TIMER1","TIMER2","TIMER3","V_BLANK","V_COUNTER","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","cmp","default","default","dma0","dma1","dma2","dma3","eq","fmt","fmt","from","from","gamepak","get","hash","hblank","into","into","keypad","ne","new","new","not","partial_cmp","read","serial","set_rust_irq_handler","timer0","timer1","timer2","timer3","try_from","try_from","try_into","try_into","type_id","type_id","vblank","vcounter","with_dma0","with_dma1","with_dma2","with_dma3","with_gamepak","with_hblank","with_keypad","with_serial","with_timer0","with_timer1","with_timer2","with_timer3","with_vblank","with_vcounter","write","KEYINPUT","Keys","KeysLowActive","a","b","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","default","default","down","eq","eq","fmt","fmt","from","from","from","from","get_keys","hash","hash","into","into","l","left","ne","ne","new","not","partial_cmp","partial_cmp","r","right","select","start","try_from","try_from","try_into","try_into","type_id","type_id","up","with_a","with_b","with_down","with_l","with_left","with_r","with_right","with_select","with_start","with_up","BACKDROP_COLOR","BG_PALETTE","Color","DISPCNT","DISPSTAT","DisplayControl","DisplayMode","DisplayStatus","OBJ_PALETTE","PalBank","VCOUNT","WHITE","_0","_1","_2","_3","_4","_5","bg_palbank","blue","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","cmp","cmp","cmp","cmp","default","default","default","default","display_bg0","display_bg1","display_bg2","display_bg3","display_mode","display_obj","display_obj_win","display_win0","display_win1","eq","eq","eq","eq","fmt","fmt","fmt","fmt","forced_blank","frame_select","from","from","from","from","from","green","hash","hash","hash","hash","hblank_irq","hblank_oam_free","into","into","into","into","is_hblank","is_vblank","is_vcounter","ne","ne","ne","new","new","new","obj_palbank","obj_vram_1d","partial_cmp","partial_cmp","partial_cmp","partial_cmp","red","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vblank_irq","vcounter","vcounter_irq","with_blue","with_display_bg0","with_display_bg1","with_display_bg2","with_display_bg3","with_display_mode","with_display_obj","with_display_obj_win","with_display_win0","with_display_win1","with_forced_blank","with_frame_select","with_green","with_hblank_irq","with_hblank_oam_free","with_is_hblank","with_is_vblank","with_is_vcounter","with_obj_vram_1d","with_red","with_vblank_irq","with_vcounter","with_vcounter_irq"],"q":["gba2k","","","","","","","","","gba2k::bios","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gba2k::interrupts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gba2k::keyinput","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gba2k::video","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The BIOS of the GBA provides some code that’s built-in …","","","Reads the link register value.","Reads the program counter value.","Reads the stack pointer value.","A <code>SWP</code> instruction, stored in the ROM.","A <code>SWPB</code> instruction, stored in the ROM.","","<code>swi #0x10</code>: Decompresses bit-packed elements.","Stores info for unpacking data with <code>BitUnPack</code>.","Stores info for unpacking data with <code>BitUnPack</code>.","<code>swi #0x02</code>: Halts the CPU until an interrupt request occurs.","<code>swi #0x04</code>: Performs an “interrupt wait”.","<code>swi #0x05</code>: Performs an “interrupt wait” for a new …","","","","","","","","","","","","Width of destination elements in bits.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","How much to add to non-zero elements by, and if zero …","","","","Width of source elements in bits.","Length of the source memory, in bytes.","","","","","","","","","","","","","","A GbaCell holds a <code>Copy</code> value that’s accessed in a single …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Makes a new cell.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,2,1,1,2,1,2,1,2,1,2,1,2,1,2,2,1,2,1,2,1,1,1,2,1,2,1,2,2,2,3,3,3,3,3,0,0,3,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,3,4,3,3,3,4,3,3,3,3,3,3,4,3,4,3,3,4,3,3,4,3,3,3,4,3,3,3,4,3,0,3,3,3,3,4,3,4,3,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,0,0,0,5,5,5,5,5,5,5,5,5,6,5,6,5,6,5,6,5,6,5,5,6,5,6,5,5,6,6,0,5,6,5,6,5,5,5,6,5,5,5,6,5,5,5,5,5,6,5,6,5,6,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,7,8,8,8,8,8,8,0,7,7,9,8,10,7,9,8,10,7,9,8,10,7,9,8,10,7,9,8,10,9,9,9,9,9,9,9,9,9,7,9,8,10,7,9,8,10,9,9,7,7,9,8,10,7,7,9,8,10,10,9,7,9,8,10,10,10,10,7,9,10,7,9,10,0,9,7,9,8,10,7,7,9,8,10,7,9,8,10,7,9,8,10,10,10,10,7,9,9,9,9,9,9,9,9,9,9,9,7,10,9,10,10,10,9,7,10,10,10],"f":[null,null,null,null,null,null,null,null,null,[[["u8",0],["u32",0],["bitunpackinfo",3]]],null,null,[[]],[[["bool",0],["irqbits",3]]],[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["bitunpackinfo",3]],["bitunpackinfo",3]],[[["bitunpackoffset",3]],["bitunpackoffset",3]],[[["bitunpackinfo",3],["bitunpackinfo",3]],["ordering",4]],[[["bitunpackoffset",3],["bitunpackoffset",3]],["ordering",4]],[[],["bitunpackinfo",3]],[[],["bitunpackoffset",3]],[[["bitunpackoffset",3]],["u32",0]],null,[[["bitunpackinfo",3],["bitunpackinfo",3]],["bool",0]],[[["bitunpackoffset",3],["bitunpackoffset",3]],["bool",0]],[[["bitunpackinfo",3],["formatter",3]],["result",6]],[[["bitunpackoffset",3],["formatter",3]],["result",6]],[[]],[[]],[[["bitunpackinfo",3],["",0]]],[[["bitunpackoffset",3],["",0]]],[[]],[[]],[[["bitunpackinfo",3],["bitunpackinfo",3]],["bool",0]],[[["bitunpackoffset",3],["bitunpackoffset",3]],["bool",0]],[[],["bitunpackoffset",3]],null,[[["bitunpackoffset",3]],["bool",0]],[[["bitunpackinfo",3],["bitunpackinfo",3]],["option",4,[["ordering",4]]]],[[["bitunpackoffset",3],["bitunpackoffset",3]],["option",4,[["ordering",4]]]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["bitunpackoffset",3],["u32",0]],["bitunpackoffset",3]],[[["bitunpackoffset",3],["bool",0]],["bitunpackoffset",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["irqbits",3],["irqbits",3]],["irqbits",3]],[[["irqbits",3],["irqbits",3]]],[[["irqbits",3],["irqbits",3]],["irqbits",3]],[[["irqbits",3],["irqbits",3]]],[[["irqbits",3],["irqbits",3]],["irqbits",3]],[[["irqbits",3],["irqbits",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["irqbits",3]],["irqbits",3]],[[["irqbits",3],["irqbits",3]],["ordering",4]],[[],["gbacell",3,[["",26,[["default",8],["gbacellsafe",8]]]]]],[[],["irqbits",3]],[[["irqbits",3]],["bool",0]],[[["irqbits",3]],["bool",0]],[[["irqbits",3]],["bool",0]],[[["irqbits",3]],["bool",0]],[[["irqbits",3],["irqbits",3]],["bool",0]],[[["gbacell",3],["formatter",3]],["result",6]],[[["irqbits",3],["formatter",3]],["result",6]],[[]],[[]],[[["irqbits",3]],["bool",0]],[[["gbacell",3,[["gbacellsafe",8]]]],["",0]],[[["irqbits",3],["",0]]],[[["irqbits",3]],["bool",0]],[[]],[[]],[[["irqbits",3]],["bool",0]],[[["irqbits",3],["irqbits",3]],["bool",0]],[[["gbacellsafe",8]],["gbacell",3,[["gbacellsafe",8]]]],[[],["irqbits",3]],[[["irqbits",3]],["irqbits",3]],[[["irqbits",3],["irqbits",3]],["option",4,[["ordering",4]]]],[[["gbacell",3,[["gbacellsafe",8]]]],["gbacellsafe",8]],[[["irqbits",3]],["bool",0]],[[["option",4]]],[[["irqbits",3]],["bool",0]],[[["irqbits",3]],["bool",0]],[[["irqbits",3]],["bool",0]],[[["irqbits",3]],["bool",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["irqbits",3]],["bool",0]],[[["irqbits",3]],["bool",0]],[[["irqbits",3],["bool",0]],["irqbits",3]],[[["irqbits",3],["bool",0]],["irqbits",3]],[[["irqbits",3],["bool",0]],["irqbits",3]],[[["irqbits",3],["bool",0]],["irqbits",3]],[[["irqbits",3],["bool",0]],["irqbits",3]],[[["irqbits",3],["bool",0]],["irqbits",3]],[[["irqbits",3],["bool",0]],["irqbits",3]],[[["irqbits",3],["bool",0]],["irqbits",3]],[[["irqbits",3],["bool",0]],["irqbits",3]],[[["irqbits",3],["bool",0]],["irqbits",3]],[[["irqbits",3],["bool",0]],["irqbits",3]],[[["irqbits",3],["bool",0]],["irqbits",3]],[[["irqbits",3],["bool",0]],["irqbits",3]],[[["irqbits",3],["bool",0]],["irqbits",3]],[[["gbacell",3,[["gbacellsafe",8]]],["gbacellsafe",8]]],null,null,null,[[["keys",3]],["bool",0]],[[["keys",3]],["bool",0]],[[["keys",3],["keys",3]],["keys",3]],[[["keys",3],["keys",3]]],[[["keys",3],["keys",3]],["keys",3]],[[["keys",3],["keys",3]]],[[["keys",3],["keys",3]],["keys",3]],[[["keys",3],["keys",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["keys",3]],["keys",3]],[[["keyslowactive",3]],["keyslowactive",3]],[[["keys",3],["keys",3]],["ordering",4]],[[["keyslowactive",3],["keyslowactive",3]],["ordering",4]],[[],["keys",3]],[[],["keyslowactive",3]],[[["keys",3]],["bool",0]],[[["keys",3],["keys",3]],["bool",0]],[[["keyslowactive",3],["keyslowactive",3]],["bool",0]],[[["keys",3],["formatter",3]],["result",6]],[[["keyslowactive",3],["formatter",3]],["result",6]],[[["keyslowactive",3]],["keys",3]],[[]],[[["keys",3]],["keyslowactive",3]],[[]],[[],["keys",3]],[[["keys",3],["",0]]],[[["keyslowactive",3],["",0]]],[[]],[[]],[[["keys",3]],["bool",0]],[[["keys",3]],["bool",0]],[[["keys",3],["keys",3]],["bool",0]],[[["keyslowactive",3],["keyslowactive",3]],["bool",0]],[[],["keys",3]],[[["keys",3]],["keys",3]],[[["keys",3],["keys",3]],["option",4,[["ordering",4]]]],[[["keyslowactive",3],["keyslowactive",3]],["option",4,[["ordering",4]]]],[[["keys",3]],["bool",0]],[[["keys",3]],["bool",0]],[[["keys",3]],["bool",0]],[[["keys",3]],["bool",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["keys",3]],["bool",0]],[[["keys",3],["bool",0]],["keys",3]],[[["keys",3],["bool",0]],["keys",3]],[[["keys",3],["bool",0]],["keys",3]],[[["keys",3],["bool",0]],["keys",3]],[[["keys",3],["bool",0]],["keys",3]],[[["keys",3],["bool",0]],["keys",3]],[[["keys",3],["bool",0]],["keys",3]],[[["keys",3],["bool",0]],["keys",3]],[[["keys",3],["bool",0]],["keys",3]],[[["keys",3],["bool",0]],["keys",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",0]],["palbank",6]],[[["color",3]],["u16",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["color",3]],["color",3]],[[["displaycontrol",3]],["displaycontrol",3]],[[["displaymode",4]],["displaymode",4]],[[["displaystatus",3]],["displaystatus",3]],[[["color",3],["color",3]],["ordering",4]],[[["displaycontrol",3],["displaycontrol",3]],["ordering",4]],[[["displaymode",4],["displaymode",4]],["ordering",4]],[[["displaystatus",3],["displaystatus",3]],["ordering",4]],[[],["color",3]],[[],["displaycontrol",3]],[[],["displaymode",4]],[[],["displaystatus",3]],[[["displaycontrol",3]],["bool",0]],[[["displaycontrol",3]],["bool",0]],[[["displaycontrol",3]],["bool",0]],[[["displaycontrol",3]],["bool",0]],[[["displaycontrol",3]],["displaymode",4]],[[["displaycontrol",3]],["bool",0]],[[["displaycontrol",3]],["bool",0]],[[["displaycontrol",3]],["bool",0]],[[["displaycontrol",3]],["bool",0]],[[["color",3],["color",3]],["bool",0]],[[["displaycontrol",3],["displaycontrol",3]],["bool",0]],[[["displaymode",4],["displaymode",4]],["bool",0]],[[["displaystatus",3],["displaystatus",3]],["bool",0]],[[["color",3],["formatter",3]],["result",6]],[[["displaycontrol",3],["formatter",3]],["result",6]],[[["displaymode",4],["formatter",3]],["result",6]],[[["displaystatus",3],["formatter",3]],["result",6]],[[["displaycontrol",3]],["bool",0]],[[["displaycontrol",3]],["bool",0]],[[]],[[["u16",0]],["color",3]],[[]],[[]],[[]],[[["color",3]],["u16",0]],[[["color",3],["",0]]],[[["displaycontrol",3],["",0]]],[[["displaymode",4],["",0]]],[[["displaystatus",3],["",0]]],[[["displaystatus",3]],["bool",0]],[[["displaycontrol",3]],["bool",0]],[[]],[[]],[[]],[[]],[[["displaystatus",3]],["bool",0]],[[["displaystatus",3]],["bool",0]],[[["displaystatus",3]],["bool",0]],[[["color",3],["color",3]],["bool",0]],[[["displaycontrol",3],["displaycontrol",3]],["bool",0]],[[["displaystatus",3],["displaystatus",3]],["bool",0]],[[],["color",3]],[[],["displaycontrol",3]],[[],["displaystatus",3]],[[["usize",0]],["palbank",6]],[[["displaycontrol",3]],["bool",0]],[[["color",3],["color",3]],["option",4,[["ordering",4]]]],[[["displaycontrol",3],["displaycontrol",3]],["option",4,[["ordering",4]]]],[[["displaymode",4],["displaymode",4]],["option",4,[["ordering",4]]]],[[["displaystatus",3],["displaystatus",3]],["option",4,[["ordering",4]]]],[[["color",3]],["u16",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["displaystatus",3]],["bool",0]],[[["displaystatus",3]],["u16",0]],[[["displaystatus",3]],["bool",0]],[[["color",3],["u16",0]],["color",3]],[[["displaycontrol",3],["bool",0]],["displaycontrol",3]],[[["displaycontrol",3],["bool",0]],["displaycontrol",3]],[[["displaycontrol",3],["bool",0]],["displaycontrol",3]],[[["displaycontrol",3],["bool",0]],["displaycontrol",3]],[[["displaycontrol",3],["displaymode",4]],["displaycontrol",3]],[[["displaycontrol",3],["bool",0]],["displaycontrol",3]],[[["displaycontrol",3],["bool",0]],["displaycontrol",3]],[[["displaycontrol",3],["bool",0]],["displaycontrol",3]],[[["displaycontrol",3],["bool",0]],["displaycontrol",3]],[[["displaycontrol",3],["bool",0]],["displaycontrol",3]],[[["displaycontrol",3],["bool",0]],["displaycontrol",3]],[[["color",3],["u16",0]],["color",3]],[[["displaystatus",3],["bool",0]],["displaystatus",3]],[[["displaycontrol",3],["bool",0]],["displaycontrol",3]],[[["displaystatus",3],["bool",0]],["displaystatus",3]],[[["displaystatus",3],["bool",0]],["displaystatus",3]],[[["displaystatus",3],["bool",0]],["displaystatus",3]],[[["displaycontrol",3],["bool",0]],["displaycontrol",3]],[[["color",3],["u16",0]],["color",3]],[[["displaystatus",3],["bool",0]],["displaystatus",3]],[[["displaystatus",3],["u16",0]],["displaystatus",3]],[[["displaystatus",3],["bool",0]],["displaystatus",3]]],"p":[[3,"BitUnpackInfo"],[3,"BitUnpackOffset"],[3,"IrqBits"],[3,"GbaCell"],[3,"Keys"],[3,"KeysLowActive"],[3,"Color"],[4,"DisplayMode"],[3,"DisplayControl"],[3,"DisplayStatus"]]},\
"voladdress":{"doc":"A crate for working with volatile locations, particularly …","t":[3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Safe","Unsafe","VolAddress","VolBlock","VolBlockIter","VolSeries","VolSeriesIter","add","apply","apply","apply","apply","as_usize","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","change_permissions","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","count","count","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get","get","hash","hash","hash","hash","hash","index","index","into","into","into","into","into","into","into","into_iter","into_iter","iter","iter","iter_range","iter_range","last","last","len","len","ne","ne","ne","new","new","new","next","next","next_back","next_back","nth","nth","nth_back","nth_back","offset","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","read","read","size_hint","size_hint","stride","sub","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","write"],"q":["voladdress","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Lets you put “Safe” into a generic type parameter.","Lets you put “Unsafe” into a generic type parameter.","A volatile address.","A volatile memory block.","An iterator over a volatile block.","A volatile memory “series”.","An iterator over a volatile series.","Advances the pointer by the given number of positions (…","Reads the address, applies the operation, and writes back …","Reads the address, applies the operation, and writes back …","Reads the address, applies the operation, and writes back …","Reads the address, applies the operation, and writes back …","Converts the <code>VolAddress</code> back into a normal <code>usize</code> value.","","","","","","","","","","","","","","","Changes the target type from <code>T</code> to <code>Z</code>.","Changes the permissions of the address to the new read and …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the address of the <code>i</code>th position, if it’s in bounds.","Gets the address of the <code>i</code>th position, if it’s in bounds.","","","","","","Indexes to the <code>i</code>th position of the memory block.","Indexes to the <code>i</code>th position of the memory series.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Creates an iterator over the addresses of the memory block.","Creates an iterator over the addresses of the memory …","Makes an iterator over the range bounds given.","Makes an iterator over the range bounds given.","","","The length of this block (in elements).","The length of this series (in elements).","","","","Constructs the value.","Constructs the value.","Constructs the value.","","","","","","","","","Offsets the address by the given number of positions (<code>isize</code>…","","","","","","Volatile reads the current value of <code>A</code>.","Volatile reads the current value of <code>A</code>.","","","The stride of this series (in bytes).","Reverses the pointer by the given number of positions (…","","","","","","","","","","","","","","","","","","","","","","Volatile writes a new value to <code>A</code>.","Volatile writes a new value to <code>A</code>."],"i":[0,0,0,0,0,0,0,1,1,1,1,1,1,2,3,1,4,5,6,7,2,3,1,4,5,6,7,1,1,2,3,1,4,5,1,4,5,6,7,2,3,1,4,5,6,7,1,4,5,6,7,2,3,1,4,5,6,7,4,5,1,4,5,6,7,4,5,2,3,1,4,5,6,7,2,3,4,5,4,5,2,3,4,5,1,4,5,1,4,5,2,3,2,3,2,3,2,3,1,1,4,5,6,7,1,1,2,3,5,1,2,3,1,4,5,6,7,2,3,1,4,5,6,7,2,3,1,4,5,6,7,1,1],"f":[null,null,null,null,null,null,null,[[["voladdress",3],["usize",0]],["voladdress",3]],[[["voladdress",3,[["unsafe",3],["unsafe",3]]],["fnonce",8]]],[[["voladdress",3,[["safe",3],["unsafe",3]]],["fnonce",8]]],[[["voladdress",3,[["unsafe",3],["safe",3]]],["fnonce",8]]],[[["voladdress",3,[["safe",3],["safe",3]]],["fnonce",8]]],[[["voladdress",3]],["usize",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["voladdress",3]],["voladdress",3]],[[["voladdress",3]],["voladdress",3]],[[["volblockiter",3]],["volblockiter",3]],[[["volseriesiter",3]],["volseriesiter",3]],[[["voladdress",3]],["voladdress",3]],[[["volblock",3]],["volblock",3]],[[["volseries",3]],["volseries",3]],[[["voladdress",3,[["ord",8],["ord",8],["ord",8]]],["voladdress",3]],["ordering",4]],[[["volblock",3,[["ord",8],["ord",8],["ord",8]]],["volblock",3]],["ordering",4]],[[["volseries",3,[["ord",8],["ord",8],["ord",8]]],["volseries",3]],["ordering",4]],[[["safe",3],["safe",3]],["ordering",4]],[[["unsafe",3],["unsafe",3]],["ordering",4]],[[["volblockiter",3]],["usize",0]],[[["volseriesiter",3]],["usize",0]],[[["voladdress",3,[["partialeq",8],["partialeq",8],["partialeq",8]]],["voladdress",3]],["bool",0]],[[["volblock",3,[["partialeq",8],["partialeq",8],["partialeq",8]]],["volblock",3]],["bool",0]],[[["volseries",3,[["partialeq",8],["partialeq",8],["partialeq",8]]],["volseries",3]],["bool",0]],[[["safe",3],["safe",3]],["bool",0]],[[["unsafe",3],["unsafe",3]],["bool",0]],[[["voladdress",3],["formatter",3]],["result",6]],[[["volblock",3],["formatter",3]],["result",6]],[[["volseries",3],["formatter",3]],["result",6]],[[["safe",3],["formatter",3]],["result",6]],[[["unsafe",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["volblock",3],["usize",0]],["option",4,[["voladdress",3]]]],[[["volseries",3],["usize",0]],["option",4,[["voladdress",3]]]],[[["voladdress",3,[["hash",8],["hash",8],["hash",8]]],["",0]]],[[["volblock",3,[["hash",8],["hash",8],["hash",8]]],["",0]]],[[["volseries",3,[["hash",8],["hash",8],["hash",8]]],["",0]]],[[["safe",3],["",0]]],[[["unsafe",3],["",0]]],[[["volblock",3],["usize",0]],["voladdress",3]],[[["volseries",3],["usize",0]],["voladdress",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["volblock",3]],["volblockiter",3]],[[["volseries",3]],["volseriesiter",3]],[[["volblock",3],["rangebounds",8,[["usize",0]]]],["volblockiter",3]],[[["volseries",3],["rangebounds",8,[["usize",0]]]],["volseriesiter",3]],[[["volblockiter",3]],["option",4]],[[["volseriesiter",3]],["option",4]],[[["volblock",3]],["usize",0]],[[["volseries",3]],["usize",0]],[[["voladdress",3,[["partialeq",8],["partialeq",8],["partialeq",8]]],["voladdress",3]],["bool",0]],[[["volblock",3,[["partialeq",8],["partialeq",8],["partialeq",8]]],["volblock",3]],["bool",0]],[[["volseries",3,[["partialeq",8],["partialeq",8],["partialeq",8]]],["volseries",3]],["bool",0]],[[["usize",0]],["voladdress",3]],[[["usize",0]],["volblock",3]],[[["usize",0]],["volseries",3]],[[["volblockiter",3]],["option",4]],[[["volseriesiter",3]],["option",4]],[[["volblockiter",3]],["option",4]],[[["volseriesiter",3]],["option",4]],[[["volblockiter",3],["usize",0]],["option",4]],[[["volseriesiter",3],["usize",0]],["option",4]],[[["volblockiter",3],["usize",0]],["option",4]],[[["volseriesiter",3],["usize",0]],["option",4]],[[["voladdress",3],["isize",0]],["voladdress",3]],[[["voladdress",3,[["partialord",8],["partialord",8],["partialord",8]]],["voladdress",3]],["option",4,[["ordering",4]]]],[[["volblock",3,[["partialord",8],["partialord",8],["partialord",8]]],["volblock",3]],["option",4,[["ordering",4]]]],[[["volseries",3,[["partialord",8],["partialord",8],["partialord",8]]],["volseries",3]],["option",4,[["ordering",4]]]],[[["safe",3],["safe",3]],["option",4,[["ordering",4]]]],[[["unsafe",3],["unsafe",3]],["option",4,[["ordering",4]]]],[[["voladdress",3,[["safe",3]]]]],[[["voladdress",3,[["unsafe",3]]]]],[[["volblockiter",3]]],[[["volseriesiter",3]]],[[["volseries",3]],["usize",0]],[[["voladdress",3],["usize",0]],["voladdress",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["voladdress",3,[["unsafe",3]]]]],[[["voladdress",3,[["safe",3]]]]]],"p":[[3,"VolAddress"],[3,"VolBlockIter"],[3,"VolSeriesIter"],[3,"VolBlock"],[3,"VolSeries"],[3,"Safe"],[3,"Unsafe"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
